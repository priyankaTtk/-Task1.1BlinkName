#include "thingProperties.h"

const int buttonPin = 2;          // Pin where the push button is connected
const int ledPin = LED_BUILTIN;   // Built-in LED pin

// Morse code for "PRIYANKA"
const char* morseCode[] = {
  ".--.",   // P
  ".-.",    // R
  "..",     // I
  "-.--",   // Y
  ".-",     // A
  "-.",     // N
  "-.-",    // K
  ".-",     // A
};

// Duration for Morse code elements
const int dotDuration = 500;      // Duration of a dot in milliseconds
const int dashDuration = 3 * dotDuration; // Duration of a dash
const int symbolSpace = dotDuration; // Space between symbols
const int letterSpace = 3 * dotDuration; // Space between letters
const int wordSpace = 7 * dotDuration; // Space between words

bool buttonState = false;   // Current state of the button
bool lastButtonState = false; // Previous state of the button
bool running = false;       // Indicates if the Morse code is currently running
bool namePrinted = false;   // Indicates if the name has been printed

void setup() {
   pinMode(buttonPin, INPUT_PULLUP); // Initialize button pin as input with pull-up resistor
   pinMode(ledPin, OUTPUT); // Initialize LED pin as output
   Serial.begin(9600); // Initialize serial communication for debugging

   // Defined in thingProperties.h
   initProperties();

   // Connect to Arduino IoT Cloud
   ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
   /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
   */
   setDebugMessageLevel(2);
   ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  buttonState = digitalRead(buttonPin) == LOW;

  if (buttonState && !lastButtonState) {
    // Button was just pressed
    if (!namePrinted) {
      // Start printing the name if not already running
      running = true;
      namePrinted = true; // Set flag to prevent restarting
      Serial.println("Starting Morse Code for PRIYANKA...");
    } else {
      // Stop printing the name if it was running
      running = false;
      Serial.println("Stopping Morse Code.");
      namePrinted = false; // Allow starting again on next button press
    }
    delay(1500); // Debounce delay
  }
  
  lastButtonState = buttonState;

  if (running) {
    for (int i = 0; i < sizeof(morseCode) / sizeof(morseCode[0]); i++) {
      blinkMorseCode(morseCode[i]);
      delay(letterSpace); // Space between letters
    }
    delay(wordSpace); // Space between words
  }
}

void blinkMorseCode(const char* code) {
  while (*code) {
    if (*code == '.') {
      digitalWrite(ledPin, HIGH);
      delay(dotDuration);
      digitalWrite(ledPin, LOW);
      delay(symbolSpace);
    } else if (*code == '-') {
      digitalWrite(ledPin, HIGH);
      delay(dashDuration);
      digitalWrite(ledPin, LOW);
      delay(symbolSpace);
    }
    code++;
  }
}
